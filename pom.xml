<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.jenkins-ci.plugins</groupId>
    <artifactId>plugin</artifactId>
    <version>2.11</version>
    <relativePath />
  </parent>
  <artifactId>zanata</artifactId>
  <version>0.4-SNAPSHOT</version>
  <packaging>hpi</packaging>

  <properties>
    <!-- Baseline Jenkins version you use to build the plugin. Users must have this version or newer to run. -->
    <jenkins.version>1.625.3</jenkins.version>
    <!-- Java Level to use. Java 7 required when using core >= 1.612 -->
    <java.level>8</java.level>
    <!-- Jenkins Test Harness version you use to test the plugin. -->
    <!-- For Jenkins version >= 1.580.1 use JTH 2.x or higher. -->
    <jenkins-test-harness.version>2.13</jenkins-test-harness.version>
    <!-- Other properties you may want to use:
         ~ hpi-plugin.version: The HPI Maven Plugin version used by the plugin..
         ~ stapler-plugin.version: The Stapler Maven plugin version required by the plugin.
    -->
    <maven.compiler.source>1.${java.level}</maven.compiler.source>
    <maven.compiler.target>1.${java.level}</maven.compiler.target>
    <workflow.version>1.14</workflow.version>
    <assertj.version>3.6.2</assertj.version>
  </properties>

  <name>Zanata Plugin</name>
  <description>Integration with Zanata Localization Service</description>
  <url>https://wiki.jenkins-ci.org/display/JENKINS/Zanata+Plugin</url>

  <!-- The default licence for Jenkins OSS Plugins is MIT. Substitute for the applicable one if needed. -->

  <licenses>
    <license>
      <name>GNU Lesser General Public License v2.1</name>
      <url>http://www.gnu.org/licenses/lgpl-2.1.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>yushao</id>
      <name>Yu Shao</name>
      <email>yshao@redhat.com</email>
    </developer>
    <developer>
      <id>huangp</id>
      <name>Patrick Huang</name>
      <email>pahuang@redhat.com</email>
    </developer>
  </developers>
  <!-- host on @jenkinsci: -->
  <scm>
    <connection>scm:git:git://github.com/jenkinsci/${project.artifactId}-plugin.git</connection>
    <developerConnection>scm:git:git@github.com:jenkinsci/${project.artifactId}-plugin.git</developerConnection>
    <url>http://github.com/jenkinsci/${project.artifactId}-plugin</url>
  </scm>

  <repositories>
    <repository>
      <id>repo.jenkins-ci.org</id>
      <url>https://repo.jenkins-ci.org/public/</url>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>repo.jenkins-ci.org</id>
      <url>https://repo.jenkins-ci.org/public/</url>
    </pluginRepository>
  </pluginRepositories>
  <dependencies>
    <dependency>
      <groupId>org.zanata</groupId>
      <artifactId>zanata-client-commands</artifactId>
      <version>4.1.0-SNAPSHOT</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <!-- jenkins uses JUL!! this better match the version used by jenkins -->
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <version>1.7.7</version>
    </dependency>

    <!-- depend on other plugins -->
    <dependency>
      <groupId>org.jenkins-ci.plugins</groupId>
      <artifactId>credentials</artifactId>
      <version>2.1.8</version>
    </dependency>
    <dependency>
      <groupId>org.jenkins-ci.plugins</groupId>
      <artifactId>git-client</artifactId>
      <version>2.2.0</version>
    </dependency>

    <!-- ========= testing dependencies ========= -->
    <!-- dependencies on Jenkins Pipeline plugins -->
    <dependency>
      <groupId>org.jenkins-ci.plugins.workflow</groupId>
      <artifactId>workflow-job</artifactId>
      <version>${workflow.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jenkins-ci.plugins.workflow</groupId>
      <artifactId>workflow-cps</artifactId>
      <version>${workflow.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jenkins-ci.plugins.workflow</groupId>
      <artifactId>workflow-step-api</artifactId>
      <version>${workflow.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jenkins-ci.plugins.workflow</groupId>
      <artifactId>workflow-basic-steps</artifactId>
      <version>${workflow.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>2.7.1</version>
      <scope>test</scope>
    </dependency>
    <!-- to mock zanata server -->
    <dependency>
      <groupId>com.github.tomakehurst</groupId>
      <artifactId>wiremock</artifactId>
      <version>2.5.1</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
        </exclusion>
        <exclusion>
          <groupId>xmlunit</groupId>
          <artifactId>xmlunit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- to test zanata webhook job trigger -->
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>3.0.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>permgen</id>
      <activation>
        <jdk>[,1.8)</jdk>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <argLine>-Djava.awt.headless=true -XX:MaxPermSize=512m @{argLine}</argLine>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>default-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>COMPLEXITY</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.60</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- We use late property evaluation (@{argLine}) so that surefire
               will pick up the argLine set by jacoco:prepare-agent. -->
          <argLine>@{argLine}</argLine>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
